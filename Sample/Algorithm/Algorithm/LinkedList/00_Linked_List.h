#pragma once

/*
	※ 리스트(Linked List)
		ㄴ 각 노드(Node)가 데이터와 포인터를 가지고 선형으로 연결되어 있는 구조
		ㄴ 종류 : 단일 연결 리스트, 이중 연결 리스트, 환형 연결 리스트...
		ㄴ 포인터에 의해 논리적으로 연결되어있어 있으며 연결 리스트의 종류에 따라 포인터가 이전 노드나 다음 노드를 연결한다.
		ㄴ 데이터들이 인접하지 않아도 되기 때문에 위치에 상관없이 상수 시간내에 데이터의 삽입 삭제를 할 수 있다.
		ㄴ 링크 구조로 인해 추가적인 메모리가 필요하다 -> 데이터 이외에 다른 노드를 가리키는 포인터가 필요함
		ㄴ 임의 접근(Ramdom Access)이 되지 않는다. -> 데이터를 찾기 위해선 순회를 해야한다.
		ㄴ 크기가 정적인 배열과 달리 가변적이기 때문에 각 노드는 무조건 동적할당 해야한다.
		ㄴ 삽입 삭제시마다 노드를 할당, 해제라는 과정을 계속 반복하기 때문에 메모리 단편화 현상이 심하다.
			- 메모리 단편화(Memory Fragmentation) : RAM의 메모리 공간이 작은 조각으로 나뉘어져 총 크기는 충분하지만 할당이 불가능한 상태
		ㄴ 메모리 단편화를 해결하기 위해 메모리 풀링을 사용한다.
			- 메모리 풀링(Memory Pooling) : 메모리가 미리 잡힐 공간을 미리 정해두고 관리하는 방법
*/

struct Node
{
	int data;
	Node* prev = nullptr;
	Node* next = nullptr;
};

//Node* a = new Node;
//Node* b = new Node;
//a->next = b;
//b->prev = a;
