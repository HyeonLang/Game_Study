// 과제 : 결합도 응집도 조사하기

/*
    *결합도(Coupling)와 응집도(Cohension)

    * 모듈, 모듈화란?

        결합도(Coupling)과 응집도(Cohesion)에 대해서 알아보기 전에 모듈(Module)과 모듈화(Modularization)에 대해 먼저 알아볼 필요가 있다.

            - 모듈화 : 소프트웨어를 각 기능별로 나누는 것

            - 모듈 : 각각의 기능별로 나눠진 모듈화의 결과를 모듈(Module)     ---> 서브루틴(Subroutine), 소프트웨어 내의 프로그램 또는 작업 단위 등의 의미로 사용된다.


        *** 모듈은 독립성이 높아야 해당 모듈을 수정하더라도 다른 모듈에 끼치는 영향이 적으며 오류가 발생하더라도 쉽게 문제를 발견하고 해결할 수 있는 장점을 가진다. ***



        그 모듈의 독립성을 판단하는 두 가지 지표를 '결합도', '응집도'로 나눔

            - 결합도 : 모듈과 모듈간의 상호 의존 정도
            - 응집도 : 모듈 내부의 기능적인 집중 정도
                (그 외, 소프트웨어 공학에서 모듈의 독립성을 높이는 방법에는 '모듈의 크기 축소' 도 포함되지만, 모듈의 독립성을 측정하는 요소에는 포함되지 않아 제외)

    좋은 모듈화는 용도에 맞게 잘 구분된 기능을 가신 모듈들로 세분화 하는 것
    즉, 개별 모듈은 독립적으로 자신에게 주어진 '기능만을 수행'하고, '명확한 결과값'을 내 놓아야 하고, 다른 모듈에 '의존성이 높아선 안된'다.


                                                        즉

                                                        결합도는 낮을 수록

                                                        응집도는 높을 수록

                                                        이상적인 모듈화다.


    물론 결합도가 극단적으로 낮고 응집도가 극단적으로 높다고 다 좋은건 아니다.
    데이터베이스 정규화와 마찬가지로 이론적으로 이상적일 수록 현실적으로 적합한건 아니다. 상황에 맞게 적절히 낮고 높을 수록 좋은 것이다.



    * 결합도의 종류 (6)

                                       -------> 순으로 결합도 낮아짐                (Good)

        내용 결합도 > 공통 결합도 > 외부 결합도 > 제어 결합도 > 스탬프 결합도 > 자료 결합도



        - 내용 결합도(Content Coupling) : 다른 모듈 내부에 있는 변수나 기능을 다른 모듈에서 사용 하는 경우
            ex) 소스파일에 #include로 해당 헤더 '직접' 추가 및 '직접' 참조 (헤더 내용 바뀌면 게임 내용 다 바뀜)

        - 공통 결합도(Common Coupling) : 파라미터가 아닌 모듈 밖에 선언되어 있는 전역 변수를 참조하고 전역변수를 갱신하는 식으로 상호작용하는 경우
            ex) 슈팅게임의 적 섬멸 수 카운트하는 '전역' 변수 -> 카운트가 일정 수 (20마리) 넘어가면 총알 색이 바뀌게 구현

        - 외부 결합도(External Coupling) : 어떤 모듈에서 반환한 값을 다른 모듈에서 참조해서 사용하는 경우
            ex) 섯다 게임의 족보 -> 족보 처리를 '외부' 헤더에 구현해 놓고 처리된 리턴값을 메인에서 '참조' 해서 사용

        - 제어 결합도(Control Coupling) : 단순히 처리를 해야할 대상인 값만 전달되는게 아니라 어떻게 처리를 해야 한다는 제어 요소(DCD, Flag등)이 전달되는 경우.
            ex) 텍스트 rpg -> 조건부로 유물 얻거나 층 도달 시 등 엔딩 처리가 달라지게 만들었을 경우 (if / else 문 사용해서 '논리' 처리)

        - 스탬프 결합도(Stamp Coupling) : 모듈간의 인터페이스로 배열이나 오브젝트, 스트럭쳐등이 전달되는 경우.
            ex) 오름차순/ 내림차순 만들기 -> 랜덤으로 난수 10 개 배열로 뽑고, 오름/ 내림 스왑하는 함수 만들어 적용 할 때, 배열 형태의 난수를 전달.

        - 자료 결합도(Data Coupling) : 모듈간의 인터페이스 전달되는 파라미터를 통해서만 모듈간의 상호 작용이 일어나는 경우. 깔끔한 Call by value
            ex) add 함수 -> add 함수를 만들고, 메인에서 add 함수 '자료' 를 이용해 단순 계산 처리하기


    * 응집도의 종류 (7)

                                        ------->  순으로 응집도 높아짐                          (Good)

        우연적 응집도 < 논리적 응집도 < 시간적 응집도 < 절차적 응집도 < 교환적 응집도 < 순차적 응집도 < 기능적 응집도



        - 우연적 응집도(Coincidental Cohesion) : 모듈 내부의 각 구성요소들이 연관이 없을 경우
            ex) 슈팅게임 키보드 상하좌우 함수에 ctrl로 총알 발사 같이 구현 -> 언뜻 키 누르는건 비슷해 보이지만, 서로 충돌 우려 有

        - 논리적 응집도(Logical Cohesion) : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우
            ex) 텍스트 rgg의 플레이어 이동함수 -> switch 문으로 구현한 이동, '이동시 이벤트' 라는 유사한 성격, 그러나 서로 관계성 없음

        - 시간적/일시적 응집도(Temporal Cohesion) : 연관된 기능이라기 보단 특정 시간에 처리되어야 하는 활동들을 한 모듈에서 처리할 경우
            ex) 초기화 모듇 -> 특정 '시점'에 반드시 수행되는 system("cls") 같은 거.. 혹은 오류 상황 시 오류로그 보내주는 기능(순서와 상관 없음)

        - 절차적 응집도(Procedural Cohesion) : 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성요소들이 그 기능을 순차적으로 수행할 경우
            ex) 패스워드 받는 함수 -> do - while 로 입력 받은 후 맞으면 다음 과정을 처리

        - 교환적/통신적 응집도(Communication Cohesion) : 동일한 입력과 출력을 사용하여 다른 기능을 수행하는 활동들이 모여있을 경우 (순차적 응집도와 다르게 순서 중요하지 X)
            ex) swap 함수 -> 정렬 해주는 함수를 여러 상황에 이용

        - 순차적 응집도(Sequential Cohesion) : 모듈 내에서 한 활동으로 부터 나온 출력값을 다른 활동이 사용할 경우
            ex) pow  함수 구현 위해 숫자 입력 받는 get_num 함수 -> 입력 받고 이후에 받은 값에 따라 처리

        - 기능적 응집도(Functional Cohesion) : 모듈 내부의 모든 기능이 단일한 목적을 위해 수행되는 경우
            ex) 아파트 인구 조사 -> 인구수 총합 더하는 목적의 함수
*/