#pragma once
/*

	0. WVP 변환 : World View Projecton : 공간 시점 투영

		그래픽 출력을 위해 3가지 요소를 변환하는 과정을 의미.

		그래픽 렌더링 파이프라인 기준으로 정점 셰이더 입력 이전에 각 정점을 정의하는 구간 정도


	1. World (공간)

		각 오브젝트의 절대좌표
		실제 공간에서의 정확한 위치를 다룬다.

		어떤 기준으로 좌표를 설정할지 지정할 필요가 있다.

		오브젝트 사이의 거리와 방향이 제시되어 있으면 그에 맞춰 전체 공간 좌표계로 변환할 수 있다.
		이를 World 변환이라 한다.

		오브젝트 기준으로 좌표를 설정한 뒤 그것을 전체 공간 좌표계로 변환하는 역할이다.


	3. View (시점)

		공간을 바라보는 카메라에 맞춰 각 오브젝트들의 좌표를 변환하는 작업이 필요

		3-1. Roll / Pitch / Yaw 3개 축을 이용하여 만들어지는 각 회전행렬 곱하기.
			카메라를 3개의 축을 돌려 방향 조절, 이 때 결정되는 값을 오일러 값 이라 한다.

			어떤 오브젝트의 트랜스폼 로테이션 행렬을 구할 때 다음과 같이 표현
			R(오일러) = R(Roll) * R(Pitch) * R(Yaw)
			회전 행렬의 순차적 곱
*/

#pragma once
/*

	1. DirectX에서 공간을 표현하는 방법

	3D공간 그 자체를 일단 생각해보자 :
	어떤 물체가 어느 위치에 있는지 어떻게 판단하는가?

	2D의 경우엔 하나의 판 안에서 오브젝트가 어느 자리에 위치하는지를
	X,Y좌표를 통해 그 판의 어디에 위치하는지 표기하는 식,
	그리고 그 좌표는 판 위의 어딘가를 기준으로 해서 표기

	그런데 2D 역시 그 좌표를 결정한다 칠 때 좌표계의 원점이 어디인지 미리 정의되어 있어야 함
	그리고 출력할 화면의 크기가 어디까지인지 결정하는 것 역시 필요
	(출력할 화면의 크기가 결정되지 않았다면 어디부터 어디까지를 모니터에 출력할 것인지
	정할 수가 없기 때문)

	그런데 3D의 경우엔 어떤 방식으로 화면에 출력되는지를 결정해야 하는가?

	-> 3D에서도 당연히 각 오브젝트들이 어디에 있는지 명확히 정의할 원점이 필요함
	원점이 없으면 데이터상으로 어디에 위치하는지 정의할 수 없음

	그리고 3D에선 그렇게 원점을 통해 정의된 각 객체들의 위치가
	어느 시점을 통해 보이는지까지 결정해야 함

	2D의 경우엔 무조건 화면을 수직으로 보니 상관없지만
	3D의 경우엔 똑같은 물체라고 해도 어느 방향에서 보느냐에 따라서 보이는 것이 달라지므로
	(당장 우리가 보고 있는 모니터도 정면에서 보면 상하좌우로 넓지만
	모니터의 옆으로 가서 보면 화면은 하나도 안 보이고 옆면의 프레임만 보이는 것처럼.)

	그래픽으로 3D공간의 물체들을 출력하려면
	반드시 어느 지점에서 어느 방향으로 보고 있는지를 설정을 해줘야 함

	거기에,
	똑같은 물체라고 해도 이 물체를 가까이서 보느냐, 혹은 멀리서 보느냐에 따라
	최종적으로 보이는 크기가 달라지므로
	이렇게 달라지는 크기를 얼마나 크게, 혹은 작게 만들 것인지 역시 설정해주는 것이 필요
	-> 실제 공간에 있는 물체들은 시점의 위치에 따라 보이는 형태, 크기 등이 달라짐
	이를 실제 공간상의 위치를 나타내는 방식에서 "시점에서 보이는 최종적인 그림의 위치"로 변환해야 함


	이 모든 과정을 데이터로서 수행하여 실제 데이터상 공간의 오브젝트들을 화면에 출력하도록 만드는 것이
	DirectX(3D지만, 2D에서도 동일하게 만들고 있음)에서 그래픽을 그리는 과정

	2. World, View, Projection 변환
	- 분명 중요한 내용이고, 앞으로 굉장히 많이 다룰 내용이므로 상세한 설명 및 최소한도의 이해가 필요
	- 수학적으로 파고들어야 할 내용이 많기 때문에 그 부분까지 설명하진 않고 기초적인 부분만 설명
	-> 이에 대한 자세한 이론은 3D 파트에서 상세하게 배울 수 있음

	이 개념은 3D 공간을 다룰 때 (어느 엔진에서건) 기본적으로 사용하는 기본 개념

	기본적으로 위 3개의 개념은 바로 위에서 설명했던 3가지 단계 각각을 말하는 것
	여기선 그 각각에 대해 좀 더 상세하게 설명할 것

	이 모든 개념을 다루기 전에 먼저 다뤄야 할 개념 : SRT 변환 행렬

	A. SRT 변환 행렬
	변환 행렬 : 어떤 위치 벡터가 주어졌을 때,
	그 위치 벡터에 크기, 회전, 위치 등을 변환시키는 행렬

	-> 주어진 위치 벡터를 우리가 원하는 형태로 변환시키기 위해 우리가 계산으로 구해야 할 행렬

	설명하기 전, 반드시 익혀둬야 하는 행렬 관련 개념
	-> (단위행렬, 역행렬 :: 이것들은 실제로 사용할 떄 간단히 설명해주면 될 것으로 보임)
	, 행렬의 곱셈, 벡터(자료구조 vector가 아닌 수학에서의 "방향을 가진 데이터")
	특히 벡터의 경우엔 벡터의 외적, 내적 등을 이용할 수 있어야 함.
	모를 경우 3D는 프로그래밍 불가 수준까지 갈 수 있고,
	2D도 불가능하진 않지만 이해하기 상당히 힘들 수 있음
	-> 다른 건 몰라도 외적, 내적만큼은 반드시 알아둬야 앞으로의 내용이 수월할 것

	어떤 오브젝트의 3차원 공간에서의 위치를 따질 때,
	(x, y, z) <- 이와 같이 3개의 축을 기준으로 해서 각 축에 해당하는 좌표를 3개 모은 것
	(10, 10, 10) <- x축의 양의 방향으로 10, y와 z도 그만큼 간 위치에 존재하고 있다
	==> 다른 의미로 표현하면
	원점 (0, 0, 0)에서 x축, y축, z축 각 방향으로 10만큼 뻗어나간 벡터라고 말할 수 있음

	-> 이 벡터에 행렬을 곱해서 그 값을 변환시킨다면
	해당 벡터 = 해당 좌표가 전체 좌표계에서 위치하는 지점도 변한다는 의미

	따라서 3D 공간에 위치한 오브젝트의 좌표를 바꾸고 싶다면
	그 오브젝트를 표시하는 데 사용된 벡터의 값에 적절한 행렬을 곱해서
	벡터의 값을 변환시켜야 한다

	이 때 사용되는 행렬이 변환 행렬으로,
	변환 행렬엔 크기(Scale), 회전(Rotation), 위치(이동)(Translation)라는 3개 행렬이 존재
	이 3가지를 통틀어서 SRT 변환 행렬이라고 함

	왜 굳이 행렬으로서 표출하냐면
	이렇게 구해진 행렬에 W, V, P 행렬을 마저 곱하는 식으로
	각 오브젝트의 위치나 크기 등을 우리가 출력할 화면의 좌표계로서 등록해
	실제 그래픽에 출력되는 데이터로 변환해야 하는데
	다른 방식으로 저장했다가 이를 행렬로 바꾸는 것보다
	아예 이 과정 자체를 행렬로서 만들어 진행하는 것이 훨씬 쉽기 때문

	각 SRT 행렬에 대해선 새 클래스를 만들어서 이를 통해 각 행렬을 구축할 떄
	각각의 행렬을 만드는 부분에서 상세히 설명

	B. World(공간) 변환

	3D(2D) 공간에서 오브젝트가 어디에 위치해있는지를 명확히 정의하기 위해선
	위치의 기준점이 될 원점을 정해야 할 필요가 있음

	그런데 3D 그래픽의 이론에서 이 World라는 개념의 의미는
	각 오브젝트의 절대좌표를 의미 -> 실제 공간에서 정확히 어느 위치에 존재하는지를 이 World에 저장함

	이 공간이라는 것 자체가 어디를 기준점으로 하는지 명확히 정의되어있지 않음
	따라서 한 물체의 위치가 어디에 존재하는지 명확히 하려면,
	그 때마다 어느 부분을 기준점으로 할 것인지 같이 명시해줘야 함

	ex | 당장 마우스를 손으로 들어볼 것
	그리고 그 마우스를 내 눈의 정면에 들고 있어볼 것
	그러면 이 마우스의 위치는 내 눈을 기준으로는 정확히 공간의 정중앙에 위치함

	그런데 모니터의 위쪽에 카메라가 하나 있다고 치고
	그걸 기준으로 마우스가 어디에 있는지 생각해보면
	카메라가 비치는 공간 기준으로는 중앙에서 약간 아래에 위치하고,
	마우스와 카메라 사이의 거리도 눈과 마우스 사이의 거리와 다름

	-> 어디에서 보는지에 따라 오브젝트(마우스)가 위치하는 상대좌표는 다를 수 밖에 없음
	따라서 오브젝트에 기준점이 될 공간(=좌표계의 원점)을 제시하고
	오브젝트의 SRT 변환 행렬에 이 World가 저장된 행렬을 곱해주는 것으로
	해당 오브젝트의 상대적 위치를 사용할 World에 걸맞는 위치로 변환하는 과정이 World 변환
	그 World를 저장해두는 행렬 = World 행렬

	이 World 행렬을 반드시 익혀둬야 하는 이유 :
	우리가 오브젝트의 위치를 관리할 때 전체 공간만을 기준으로 하지 않는 경우가 훨씬 많기 때문

	ex) 우리가 사람을 만들었다 칩시다
	사람 하면 그 사람의 위치를 나타내는 좌표가 하나 주어짐
	그런데 사람은 단순히 사람이 있습니다로 끝나는 게 아니고,
	그 사람의 머리, 팔, 다리 등은 사람의 몸통과는 별개로 움직이는 것이 정상
	따라서 사람의 사지가 움직이는 것을 우리가 제어해줘야 하는데

	전체 공간의 좌표계만 사용할 경우,
	움직일 때마다 사지의 각 좌표들을 전체좌표계에 맞게 그때그떄 계산해야 함

	하지만, 사람의 심장의 좌표에 따라가도록 각 사지의 위치를 정의해뒀다면
	사람이 움직일 때 각 사지들의 좌표를 우리가 일일이 지정할 필요 없이
	사람의 심장의 좌표가 움직임에 따라 각 사지의 좌표 역시 움직이도록 만들 수 있음
	-> 이 방식을 이용하면 사람 좌표 하나만 가지고 전체 좌표계에서 사람의 사지가 움직이는 것을 구현 가능

	이런 역할을 하는 것이 World 변환
	다른 오브젝트와 연동되어서 움직여야 하는 등의 오브젝트는
	그 다른 오브젝트의 World를 입력받아서 이를 기준으로 움직이도록 한다


	C. View(시점, 카메라) 변환

	전체 공간에서 어디어디에 위치해있다 쳐도
	그 공간을 화면에 담으려면 적어도 "우리가 지금 전체 공간의 어느 부분을 보고 있다"라고 명시할 필요 O

	그러면 결국 화면을 찍을 카메라가 필요한데,
	카메라로 사진을 찍을려면 그 카메라가 볼 수 있는 곳에 오브젝트들이 있어야 할 것

	따라서 물체들을 카메라가 위치한 공간에서 바라보는 것처럼 보이게,
	각 오브젝트들의 좌표를 카메라의 위치에 맞게 변환(회전)해주는 작업을 거쳐야 함

	ex|마찬가지로 마우스를 예시로 들면
	마우스를 정면에서 본다 해도 마우스가 어떻게 회전되어있느냐에 따라
	버튼이 보일 수도, 안 보일 수도 있음
	이를 내 시야예 맞게 데이터상에서 회전시키는 것이 View 변환

	View 변환은 방법이 크게 2가지가 있는데
	 - Roll/Pitch/Yaw라는 3개 축을 이용해 만들어지는 각 회전행렬을 곱하는 방식
	 - 카메라의 위치 자체를 벡터로 구한 뒤, 이 벡터의 회전축을 구해서 각 오브젝트에 적용하는 방식

	3D 공간을 다룰 때는 이 둘이 전부 중요했음
	2D의 경우엔 Yaw(Z축) 하나만을 이용하기 때문에 직접 깊게 다룰 예정은 없을 것


	D. Projection(투영) 변환

	각 오브젝트들의 위치, 회전 등을 시점에 맞게 변환시켜줬으면
	이제 각 오브젝트들은 카메라의 위치에 따라서 원근법에 맞게 커지거나 작아져야 함

	오브젝트의 실제 크기는 각각 따로 정해져있는 것이 당연
	하지만, 시점에 따라선 이게 크게 보일 수도 있고 작게 보일 수도 있음

	그렇게 길이 등에 따라 실제 화면에 얼만큼 크게 그릴 것인지를 설정해야 하는데
	이를 이 투영 행렬을 곱해주는 식으로 정리함
	카메라에서 일정 거리 떨어진 만큼을 기준으로 해서, 오브젝트가 그보다 가까우면 더 크게 그리고
	더 멀면 더 작게 그리는 식

	+추가로
	화면의 비율 같은 것 역시 이 단계에서 맞춤

	DX에서 화면을 그릴 때 비율만으로 그리면 정다면체가 나오지 않고
	화면 비율에 따라 일그러진 형태로 그려져서, 원하는 크기로 만들기 위해선
	화면 비율에 맞는 값으로 보정해서 그리고는 했는데
	투영 변환을 거칠 경우 아예 입력되는 값 자체가 화면 비율에 맞는 값으로 알아서 정리되도록 하는 처리가 됨


	이 각각의 단계에 대한 모든 내용은 실습을 하면서 어떤 내용인지 짚어볼 예정,

	그리고 이 모든 내용은 필요한 정도로만 이해하기 위해 최소화시킨 설명
	3D 프로그래밍을 하는 쪽에 좀 더 관심이 있다면
	WVP 변환이라고 검색해서 나오는 내용들을 추가로 공부할 것을 권장함

	TO-DO)
	지금 여기서 설명한 WVP 변환은 물론, 각 오브젝트들 역시 SRT 변환을 통해서
	화면에 출력하는 구조가 되도록 프레임워크를 다시 뜯어고칠 예정

	이 과정을 거친 뒤, 우리가 만들었던 오브젝트들을 다시 해당 프레임워크에 맞는 식으로 출력해보는 것

*/
