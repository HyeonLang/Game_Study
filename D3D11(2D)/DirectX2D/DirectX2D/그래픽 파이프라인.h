#pragma once
/*

1. 그래픽 파이프라인이란?
DirectX에서 그래픽을 화면(=모니터)에 출력하기 위해 거치는 일련의 과정

파이프라인 : 프로그래밍에서 한 데이터를 처리하면 그 결과물이 출력되는데
이를 곧바로 다음 단계에 입력해서 다시 데이터를 처리하고,
이렇게 나온 결과물을 다시 다음 단계로 넘기는 식으로
정해진 여러 단계를 거쳐 원하는 결과를 도출해내는 과정을 말함

즉, 직관적으로 보이자면

맨 처음에 그림을 그리기 위해 작성한 자료
-> 자료 처리과정 1
-> 자료 처리과정 2
-> ...
-> ...
-> 최종적으로 화면에 직접 출력할 수 있게 변형된 자료
-> 화면에 출력

2. 그래픽 파이프라인의 단계

참고 주소 :
https://learn.microsoft.com/ko-kr/windows/win32/direct3d11/overviews-direct3d-11-graphics-pipeline
위 주소의 사진을 참고할 것

여기서는 위에 설명된 내용 중 우리가 직접적으로 다룰 단계들에 대해서만 상세히 다루고,
나머지는 간단히만 설명할 예정

이 그래픽 파이프라인의 단계 수 등은 DirectX 버젼마다 달라지는 경우가 있음
여기서 설명하는 내용은 DX11을 기준으로 한다는 것을 밝힘

A. Input-Assembler 단계
우리가 그래픽 구성에 이용할 자료들을 다음 단계로 넘기기 위해
각 단계에서 사용할 수 있는 규격으로 자료들을 규합하는 과정

다음 단계들, 특히 Vertex Shader 등을 이용할 때는
자료가 반드시 정해진 규격에 맞게 들어가야 할 필요가 있고,
그 규격에서 벗어나면 아예 처리 자체가 진행되지 않음

때문에 우리가 입력할 자료들의 구성만큼은 반드시 해당 규격에 맞춰서 구성되어야 함
그걸 처리하는 단계가 이 부분
(= 우리가 본격적으로 그래픽 파이프라인을 이용하기 전에 코딩으로 처리하는 부분이 여기)


B. Vertex Shader Stage(정점 셰이더를 이용한 처리) ★
규격에 맞춰서 입력했다고는 하지만,
어디까지나 규격만 맞췄을 뿐 데이터 자체는 3D 공간에 있는 내용물들 그 자체

이렇게, 아무런 처리도 되어있지 않아 화면 처리에 그대로 사용할 수 없는 데이터들을
그래픽을 출력하는데 필요한 형태로 가공하는 첫번째 처리 단계

기본적으로는 DirectX는 3D를 다루기 위해 만들어진 엔진
(2D를 아예 다른 기능으로서 지원했던 적도 있지만 현재는 3D에 통합되었음)
3D 공간에서 그래픽, 즉 한 화면이라는 개념을 성립시키기 위해선
만들어져 있는 사물을 보는 시점이 필요(뷰포트가 이것)

정점 셰이더는 우리가 입력했던 3D공간의 좌표계들을
"시점 기준의 좌표계로 변환"하는 역할을 맡는다

C. 테셀레이션 단계
(DX11 기준으로는 이 안에 Hull Shader, Tessellator, Domain Shader, Geometry Shader 등
여러 단계가 존재하지만 큰 틀으로 보면 한 단계로 축약 가능)
<- 2D에서는 다룰 일 없음, 3D에서는 쓸 일이 있을 것

3D 그래픽은 최소단계가 "폴리곤"이라는 단위로 구성되어 있음
Polygon(다면체) : 3D 그래픽에서는 삼각형을 말함
3D 그래픽의 각종 그래픽 표현은 기본적으로 삼각형의 집합으로서 구성되어 있는데
이 삼각형(폴리곤)의 수가 많으면 많을 수록 최대한 세밀하게 그래픽을 표현할 수 있음

테셀레이션 단계는 위에서 정점 셰이더를 통해 만들어진 데이터들을
폴리곤으로 최대한 잘게 쪼개는 단계

(처음 데이터에서부터 폴리곤을 더 세밀하게 작성하는 것도 퀄리티에 영향이 있겠지만)
(시스템 단위에서 유의미할 정도로 처리하기 쉽게 쪼개는 것은 그래픽 파이프라인의 몫)

2D에서는 직접 다룰 일이 없을 예정


D. Rasterizer(래스터라이저) 단계
3D 공간에서 만들어내는 데이터들은 도형의 변 등 연속적인 데이터로 이뤄져있지만
실제로 이런 데이터가 출력되는 모니터는 하나하나의 픽셀이 모여서 그래픽을 표기하는 것
따라서, 최종적으로는 이 모니터의 각 픽셀 하나하나에 어떤 값이 들어갈 것인지를 지정해줘야 함

그런데 테셀레이션 단계까지는 입력된 데이터들을 도형으로서 다루지 점의 집합으로서 다루고 있지 않음
그걸 픽셀 하나하나 단위로 분해하는 것이 이 래스터라이저 단계

마찬가지로 이 부분은 직접 다룰 일이 없음
3D에서도 아마 다룰 일은 없지 않을까 싶음

E. Pixel Shader Stage(픽셀 셰이더 단계) ★
래스터라이저 단계에서 픽셀 하나하나 단위로 쪼개진 데이터들을 받아서
그 데이터를 참조하여 모니터의 각 픽셀에 출력할 색을 최종적으로 여기서 결정하는 단계

픽셀 하나하나에 색을 입히는 단계
이 때, 데이터를 그대로 사용할 것인지, 혹은 픽셀 위치 등에 따라 필터를 적용할 것인지 등도
여기에서 결정할 수 있어서,
이 단계에서 각종 색 필터, 혹은 모자이크 등을 처리하기도 함

Final. 그렇게 모든 픽셀의 색을 정했으면 모니터에 출력

★ 표시를 한 2개, 즉 정점 셰이더와 픽셀 셰이더는
우리가 직접 .hlsl 파일로 만들어서 이용하는 파트

*/